
package fixed
import "testing"

var bincdfTestCases_10000000 = []BinCDFCase{
{
    n: 3779591,
    x: 2080445,
    p: 0.5511564315067475,
    cdf: 0.002614755366279241,
    s: "+0'00ab5c50c90383/56",
},
{
    n: 10000000,
    x: 100001,
    p: 0.01,
    cdf: 0.5021089548052431,
    s: "+0'808a3663ead1a0/56",
},
{
    n: 10000000,
    x: 200001,
    p: 0.02,
    cdf: 0.5014958592438696,
    s: "+0'8062085a8826a0/56",
},
{
    n: 10000000,
    x: 300001,
    p: 0.03,
    cdf: 0.5012251770683278,
    s: "+0'80504b0f70b600/56",
},
{
    n: 10000000,
    x: 400001,
    p: 0.04,
    cdf: 0.5010643932401264,
    s: "+0'8045c18e280b90/56",
},
{
    n: 10000000,
    x: 500001,
    p: 0.05,
    cdf: 0.5009551134092666,
    s: "+0'803e9824db5558/56",
},
{
    n: 10000000,
    x: 600001,
    p: 0.06,
    cdf: 0.5008747538542615,
    s: "+0'803953ef3233d0/56",
},
{
    n: 10000000,
    x: 700001,
    p: 0.07,
    cdf: 0.5008125925137727,
    s: "+0'8035410a458970/56",
},
{
    n: 10000000,
    x: 800001,
    p: 0.08,
    cdf: 0.500762806864111,
    s: "+0'8031fdc688d660/56",
},
{
    n: 10000000,
    x: 900001,
    p: 0.09,
    cdf: 0.5007218827005485,
    s: "+0'802f4f2e9724b8/56",
},
{
    n: 10000000,
    x: 1000001,
    p: 0.1,
    cdf: 0.5006877041607976,
    s: "+0'802d11c2e14450/56",
},
{
    n: 10000000,
    x: 1100001,
    p: 0.11,
    cdf: 0.5006588264742946,
    s: "+0'802b2d46292c70/56",
},
{
    n: 10000000,
    x: 1200001,
    p: 0.12,
    cdf: 0.5006343437922585,
    s: "+0'80299285d79880/56",
},
{
    n: 10000000,
    x: 1300001,
    p: 0.13,
    cdf: 0.5006136357013995,
    s: "+0'8028371944e840/56",
},
{
    n: 10000000,
    x: 1400001,
    p: 0.14,
    cdf: 0.5005962607742462,
    s: "+0'80271398867870/56",
},
{
    n: 10000000,
    x: 1500001,
    p: 0.15,
    cdf: 0.5005819926144914,
    s: "+0'802624373ee9c0/56",
},
{
    n: 10000000,
    x: 1600001,
    p: 0.16,
    cdf: 0.5005706212776119,
    s: "+0'8025656fb9ca68/56",
},
{
    n: 10000000,
    x: 1700001,
    p: 0.17,
    cdf: 0.5005620849773172,
    s: "+0'8024d638985bc8/56",
},
{
    n: 10000000,
    x: 1800001,
    p: 0.18,
    cdf: 0.500556342131882,
    s: "+0'802475df4306a8/56",
},
{
    n: 10000000,
    x: 1900001,
    p: 0.19,
    cdf: 0.5005533713252311,
    s: "+0'80244407be91c8/56",
},
{
    n: 10000000,
    x: 2000001,
    p: 0.2,
    cdf: 0.5005531734298079,
    s: "+0'802440b5ca4020/56",
},
{
    n: 10000000,
    x: 2100001,
    p: 0.21,
    cdf: 0.5005557850928033,
    s: "+0'80246c86cc14f0/56",
},
{
    n: 10000000,
    x: 2200001,
    p: 0.22,
    cdf: 0.5005612395403086,
    s: "+0'8024c809788978/56",
},
{
    n: 10000000,
    x: 2300001,
    p: 0.23,
    cdf: 0.5005695434835284,
    s: "+0'8025535aa2a9e0/56",
},
{
    n: 10000000,
    x: 2400001,
    p: 0.24,
    cdf: 0.5005807584415141,
    s: "+0'80260f82835fb0/56",
},
{
    n: 10000000,
    x: 2500001,
    p: 0.25,
    cdf: 0.5005948657766678,
    s: "+0'8026fc310e6988/56",
},
{
    n: 10000000,
    x: 2600001,
    p: 0.26,
    cdf: 0.5006118932666843,
    s: "+0'802819dd91ad60/56",
},
{
    n: 10000000,
    x: 2700001,
    p: 0.27,
    cdf: 0.5006318465813131,
    s: "+0'802968a0671fd0/56",
},
{
    n: 10000000,
    x: 2800001,
    p: 0.28,
    cdf: 0.5006547064439356,
    s: "+0'802ae826c3e318/56",
},
{
    n: 10000000,
    x: 2900001,
    p: 0.29,
    cdf: 0.5006804590707152,
    s: "+0'802c9835747a20/56",
},
{
    n: 10000000,
    x: 3000001,
    p: 0.3,
    cdf: 0.5007090465855096,
    s: "+0'802e77d3e56718/56",
},
{
    n: 10000000,
    x: 3100001,
    p: 0.31,
    cdf: 0.5007404490533802,
    s: "+0'803086ac77f7a0/56",
},
{
    n: 10000000,
    x: 3200001,
    p: 0.32,
    cdf: 0.5007745745401737,
    s: "+0'8032c334518010/56",
},
{
    n: 10000000,
    x: 3300001,
    p: 0.33,
    cdf: 0.5008113627589621,
    s: "+0'80352c6883d2c0/56",
},
{
    n: 10000000,
    x: 3400001,
    p: 0.34,
    cdf: 0.5008507207337303,
    s: "+0'8037c0b9baba00/56",
},
{
    n: 10000000,
    x: 3500001,
    p: 0.35,
    cdf: 0.5008925532601851,
    s: "+0'803a7e8f0ffba0/56",
},
{
    n: 10000000,
    x: 3600001,
    p: 0.36,
    cdf: 0.5009367169181858,
    s: "+0'803d6380877ad0/56",
},
{
    n: 10000000,
    x: 3700001,
    p: 0.37,
    cdf: 0.5009831129458879,
    s: "+0'80406de5f36bc0/56",
},
{
    n: 10000000,
    x: 3800001,
    p: 0.38,
    cdf: 0.5010315834237979,
    s: "+0'80439b19117ca0/56",
},
{
    n: 10000000,
    x: 3900001,
    p: 0.39,
    cdf: 0.5010819786437635,
    s: "+0'8046e896e3d2c0/56",
},
{
    n: 10000000,
    x: 4000001,
    p: 0.4,
    cdf: 0.5011341239397118,
    s: "+0'804a53713b0d60/56",
},
{
    n: 10000000,
    x: 4100001,
    p: 0.41,
    cdf: 0.5011878603321399,
    s: "+0'804dd8fd475c98/56",
},
{
    n: 10000000,
    x: 4200001,
    p: 0.42,
    cdf: 0.5012429721883667,
    s: "+0'8051759ce61c80/56",
},
{
    n: 10000000,
    x: 4300001,
    p: 0.43,
    cdf: 0.5012992725232688,
    s: "+0'8055262cfefbe0/56",
},
{
    n: 10000000,
    x: 4400001,
    p: 0.44,
    cdf: 0.5013565506961615,
    s: "+0'8058e724e018e0/56",
},
{
    n: 10000000,
    x: 4500001,
    p: 0.45,
    cdf: 0.5014145672908131,
    s: "+0'805cb480408548/56",
},
{
    n: 10000000,
    x: 4600001,
    p: 0.46,
    cdf: 0.5014731046468204,
    s: "+0'80608a98481c20/56",
},
{
    n: 10000000,
    x: 4700001,
    p: 0.47,
    cdf: 0.5015319180208015,
    s: "+0'80646551ccabc0/56",
},
{
    n: 10000000,
    x: 4800001,
    p: 0.48,
    cdf: 0.5015907561198489,
    s: "+0'8068407582bad0/56",
},
{
    n: 10000000,
    x: 4900001,
    p: 0.49,
    cdf: 0.5016493633377218,
    s: "+0'806c17b99840a8/56",
},
}

func Benchmark_Fixed_BinCDF_10000000(b *testing.B) {
	for i := 0; i < b.N; i++ {
		tc := bincdfTestCases_10000000[i%len(bincdfTestCases_10000000)]
		bincdfResultFix = BinCDF64(tc.n, From(tc.p), tc.x)
	}

	bincdfResultFix.lo++
}

func Benchmark_Float_BinCDF_10000000(b *testing.B) {
	for i := 0; i < b.N; i++ {
		tc := bincdfTestCases_10000000[i%len(bincdfTestCases_10000000)]
		bincdfResultFlt = bincdf_(tc.n, tc.p, tc.x)
	}

	bincdfResultFlt++
}

func TestFixed_BinCDF_10000000(t *testing.T) {
	acc := accuracy{Epsilon: 1e-4}
	for i, tc := range bincdfTestCases_10000000 {
		p := From(tc.p)
		got := BinCDF64(tc.n, p, tc.x)
		if ok := acc.update(got, tc.cdf); !ok {
			t.Errorf("%d: BinCDF(%v,%v,%v) => got %v|%v, want %v|%v", i, tc.n, tc.p, tc.x, got, got.Float(), From(tc.cdf), tc.cdf)
		}
	}
	t.Log(acc)
}

