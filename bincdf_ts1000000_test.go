package fixed

import "testing"

var bincdfTestCases_1000000 = []BinCDFCase{
	{
		n:   353944,
		x:   42092,
		p:   0.11854916867602958,
		cdf: 0.7550688745830532,
		s:   "+0'c14c319a8fce20/56",
	},
	{
		n:   84667,
		x:   49052,
		p:   0.5668220853281501,
		cdf: 0.9999999999999146,
		s:   "+0'ffffffffffe7f8/56",
	},
	{
		n:   942435,
		x:   170727,
		p:   0.17988010102807947,
		cdf: 0.9993624006810573,
		s:   "+0'ffd636dbc6f5e0/56",
	},
	{
		n:   168753,
		x:   86925,
		p:   0.5058228690198274,
		cdf: 0.999999999999988,
		s:   "+0'fffffffffffca0/56",
	},
	{
		n:   1000000,
		x:   10001,
		p:   0.01,
		cdf: 0.5066687006016071,
		s:   "+0'81b50a3afd9fb0/56",
	},
	{
		n:   1000000,
		x:   20001,
		p:   0.02,
		cdf: 0.5047301489917935,
		s:   "+0'8135febb399700/56",
	},
	{
		n:   1000000,
		x:   30001,
		p:   0.03,
		cdf: 0.5038742577166937,
		s:   "+0'80fde742308170/56",
	},
	{
		n:   1000000,
		x:   40001,
		p:   0.04,
		cdf: 0.5033658694950571,
		s:   "+0'80dc95eb676450/56",
	},
	{
		n:   1000000,
		x:   50001,
		p:   0.05,
		cdf: 0.5030202365186415,
		s:   "+0'80c5ef2912e148/56",
	},
	{
		n:   1000000,
		x:   60001,
		p:   0.06,
		cdf: 0.5027661204750877,
		s:   "+0'80b547ccfa3030/56",
	},
	{
		n:   1000000,
		x:   70001,
		p:   0.07,
		cdf: 0.5025694527037714,
		s:   "+0'80a8644354d130/56",
	},
	{
		n:   1000000,
		x:   80001,
		p:   0.08,
		cdf: 0.5024116331685854,
		s:   "+0'809e0c7d96ca38/56",
	},
	{
		n:   1000000,
		x:   90001,
		p:   0.09,
		cdf: 0.5022815229441986,
		s:   "+0'8095859a6e2f20/56",
	},
	{
		n:   1000000,
		x:   100001,
		p:   0.1,
		cdf: 0.5021720037120555,
		s:   "+0'808e582ce8fa48/56",
	},
	{
		n:   1000000,
		x:   110001,
		p:   0.11,
		cdf: 0.502078277138501,
		s:   "+0'808833b45785d8/56",
	},
	{
		n:   1000000,
		x:   120001,
		p:   0.12,
		cdf: 0.5019969828611677,
		s:   "+0'8082dfd01452c0/56",
	},
	{
		n:   1000000,
		x:   130001,
		p:   0.13,
		cdf: 0.5019256788253439,
		s:   "+0'807e338793d3e0/56",
	},
	{
		n:   1000000,
		x:   140001,
		p:   0.14,
		cdf: 0.5018625573290578,
		s:   "+0'807a1086d0b2d0/56",
	},
	{
		n:   1000000,
		x:   150001,
		p:   0.15,
		cdf: 0.5018062308128367,
		s:   "+0'80765f86452948/56",
	},
	{
		n:   1000000,
		x:   160001,
		p:   0.16,
		cdf: 0.5017556283917397,
		s:   "+0'80730e8e86c580/56",
	},
	{
		n:   1000000,
		x:   170001,
		p:   0.17,
		cdf: 0.501709899307116,
		s:   "+0'80700f599a8008/56",
	},
	{
		n:   1000000,
		x:   180001,
		p:   0.18,
		cdf: 0.5016683643697032,
		s:   "+0'806d568267db18/56",
	},
	{
		n:   1000000,
		x:   190001,
		p:   0.19,
		cdf: 0.5016304693832716,
		s:   "+0'806adabcada3d0/56",
	},
	{
		n:   1000000,
		x:   200001,
		p:   0.2,
		cdf: 0.5015957632335815,
		s:   "+0'80689476e68010/56",
	},
	{
		n:   1000000,
		x:   210001,
		p:   0.21,
		cdf: 0.5015638664397382,
		s:   "+0'80667d5336c7e0/56",
	},
	{
		n:   1000000,
		x:   220001,
		p:   0.22,
		cdf: 0.5015344634617942,
		s:   "+0'8064900662a3e0/56",
	},
	{
		n:   1000000,
		x:   230001,
		p:   0.23,
		cdf: 0.5015072892782432,
		s:   "+0'8062c81e27d9b8/56",
	},
	{
		n:   1000000,
		x:   240001,
		p:   0.24,
		cdf: 0.5014821147874057,
		s:   "+0'806121c28a7388/56",
	},
	{
		n:   1000000,
		x:   250001,
		p:   0.25,
		cdf: 0.5014587482849616,
		s:   "+0'805f99bc2d5048/56",
	},
	{
		n:   1000000,
		x:   260001,
		p:   0.26,
		cdf: 0.5014370211693744,
		s:   "+0'805e2d36ed1660/56",
	},
	{
		n:   1000000,
		x:   270001,
		p:   0.27,
		cdf: 0.5014167895205524,
		s:   "+0'805cd9c8a7f560/56",
	},
	{
		n:   1000000,
		x:   280001,
		p:   0.28,
		cdf: 0.5013979275492046,
		s:   "+0'805b9d551b2390/56",
	},
	{
		n:   1000000,
		x:   290001,
		p:   0.29,
		cdf: 0.5013803217475914,
		s:   "+0'805a75f4c38c80/56",
	},
	{
		n:   1000000,
		x:   300001,
		p:   0.3,
		cdf: 0.5013638792983856,
		s:   "+0'80596218fb7538/56",
	},
	{
		n:   1000000,
		x:   310001,
		p:   0.31,
		cdf: 0.5013485134193802,
		s:   "+0'8058604d08d210/56",
	},
	{
		n:   1000000,
		x:   320001,
		p:   0.32,
		cdf: 0.501334148868641,
		s:   "+0'80576f4dc24148/56",
	},
	{
		n:   1000000,
		x:   330001,
		p:   0.33,
		cdf: 0.5013207190061776,
		s:   "+0'80568dfcf05128/56",
	},
	{
		n:   1000000,
		x:   340001,
		p:   0.34,
		cdf: 0.501308165863295,
		s:   "+0'8055bb6199c0a0/56",
	},
	{
		n:   1000000,
		x:   350001,
		p:   0.35,
		cdf: 0.5012964344304738,
		s:   "+0'8054f68f7af480/56",
	},
	{
		n:   1000000,
		x:   360001,
		p:   0.36,
		cdf: 0.5012854790690191,
		s:   "+0'80543ec28fa630/56",
	},
	{
		n:   1000000,
		x:   370001,
		p:   0.37,
		cdf: 0.5012752573917387,
		s:   "+0'80539344ca9fc0/56",
	},
	{
		n:   1000000,
		x:   380001,
		p:   0.38,
		cdf: 0.5012657336695812,
		s:   "+0'8052f37cb75f40/56",
	},
	{
		n:   1000000,
		x:   390001,
		p:   0.39,
		cdf: 0.5012568742391798,
		s:   "+0'80525ed9c0a158/56",
	},
	{
		n:   1000000,
		x:   400001,
		p:   0.4,
		cdf: 0.5012486493839209,
		s:   "+0'8051d4dc44a2e8/56",
	},
	{
		n:   1000000,
		x:   410001,
		p:   0.41,
		cdf: 0.5012410324903513,
		s:   "+0'80515511f596d0/56",
	},
	{
		n:   1000000,
		x:   420001,
		p:   0.42,
		cdf: 0.5012339994216475,
		s:   "+0'8050df1328c530/56",
	},
	{
		n:   1000000,
		x:   430001,
		p:   0.43,
		cdf: 0.5012275321666608,
		s:   "+0'8050729282b670/56",
	},
	{
		n:   1000000,
		x:   440001,
		p:   0.44,
		cdf: 0.5012216104192541,
		s:   "+0'80500f38cc9508/56",
	},
	{
		n:   1000000,
		x:   450001,
		p:   0.45,
		cdf: 0.5012162206675228,
		s:   "+0'804fb4cbfde200/56",
	},
	{
		n:   1000000,
		x:   460001,
		p:   0.46,
		cdf: 0.5012113473652187,
		s:   "+0'804f6309515570/56",
	},
	{
		n:   1000000,
		x:   470001,
		p:   0.47,
		cdf: 0.5012069791288566,
		s:   "+0'804f19bfe2a928/56",
	},
	{
		n:   1000000,
		x:   480001,
		p:   0.48,
		cdf: 0.501203107549383,
		s:   "+0'804ed8cb940300/56",
	},
	{
		n:   1000000,
		x:   490001,
		p:   0.49,
		cdf: 0.5011997254728615,
		s:   "+0'804ea00dab8ce0/56",
	},
}

func Benchmark_Fixed_BinCDF_1000000(b *testing.B) {
	for i := 0; i < b.N; i++ {
		tc := bincdfTestCases_1000000[i%len(bincdfTestCases_1000000)]
		bincdfResultFix = BinCDF64(tc.n, From(tc.p), tc.x)
	}

	bincdfResultFix.lo++
}

func Benchmark_Float_BinCDF_1000000(b *testing.B) {
	for i := 0; i < b.N; i++ {
		tc := bincdfTestCases_1000000[i%len(bincdfTestCases_1000000)]
		bincdfResultFlt = bincdf_(tc.n, tc.p, tc.x)
	}

	bincdfResultFlt++
}

func TestFixed_BinCDF_1000000(t *testing.T) {
	acc := accuracy{Epsilon: 1e-6}
	for i, tc := range bincdfTestCases_1000000 {
		p := From(tc.p)
		got := BinCDF64(tc.n, p, tc.x)
		if ok := acc.update(got, tc.cdf); !ok {
			t.Errorf("%d: BinCDF(%v,%v,%v) => got %v|%v, want %v|%v", i, tc.n, tc.p, tc.x, got, got.Float(), From(tc.cdf), tc.cdf)
		}
	}
	t.Log(acc)
}
